#pragma once
#include "bitboard.hpp"
#include "chess.hpp"
#define MAGICS_ARRAY_SIZE 200000

enum Direction : Offset {
    SOUTH = -8,
    NORTH = 8,
    WEST = -1,
    EAST = 1,
    SOUTH_WEST = SOUTH + WEST,
    SOUTH_EAST = SOUTH + EAST,
    NORTH_EAST = NORTH + EAST,
    NORTH_WEST = NORTH + WEST,
    SSW = SOUTH + SOUTH + WEST,
    SSE = SOUTH + SOUTH + EAST,
    EES = EAST + EAST + SOUTH,
    EEN = EAST + EAST + NORTH,
    NNE = NORTH + NORTH + EAST,
    NNW = NORTH + NORTH + WEST,
    WWN = WEST + WEST + NORTH,
    WWS = WEST + WEST + SOUTH
};

enum RayDirection : Offset {
    SOUTH_EAST_RAY,
    SOUTH_RAY,
    SOUTH_WEST_RAY,
    WEST_RAY,
    NORTH_WEST_RAY,
    NORTH_RAY,
    NORTH_EAST_RAY,
    EAST_RAY,
    POSITIVE = NORTH_WEST_RAY,
    RAY_COUNT = EAST_RAY + 1
};

inline Bitboard getMagicIndex(Bitboard board, Bitboard magic, uint8_t shift) {
    return (board * magic) >> shift;
}

class Magic {
  public:
    Bitboard *attacks;
    Bitboard magic;
    Bitboard mask;
    uint8_t shift;
    inline Bitboard getMagicIndex(Bitboard board) {
        return (board * magic) >> shift;
    }
    inline Bitboard getAttack(Bitboard occupation) {
        return attacks[getMagicIndex(occupation & mask)];
    }
};

extern std::array<Bitboard, MAGICS_ARRAY_SIZE> magics;
extern std::array<Magic, Square::SQUARE_COUNT> rookMagics;
extern std::array<Magic, Square::SQUARE_COUNT> bishopMagics;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, RayDirection::RAY_COUNT> rays;
extern std::array<Bitboard, Square::SQUARE_COUNT> rankAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> fileAttacks;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> knightAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> kingAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> bishopMasks;
extern std::array<Bitboard, Square::SQUARE_COUNT> rookMasks;
extern std::array<Bitboard, Square::SQUARE_COUNT> queenMasks;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnPushes;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnDoublePushes;
extern std::array<Bitboard, Square::SQUARE_COUNT> maskedSquare;
extern std::array<Bitboard, Square::SQUARE_COUNT> unmaskedSquare;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, Square::SQUARE_COUNT> inBetween;

void initGlobals();

void initPrimitives();
void initMagics();
void initRayAttacks();

Magic initMagicSquare(SquareIndex index, bool bishop, uint64_t *magicIndex);

Bitboard getRayAttacks(Bitboard occupied, RayDirection direction, SquareIndex square);

// Line attacks
Bitboard getDiagonalMask(SquareIndex index);
Bitboard getDiagonal2Mask(SquareIndex index);
Bitboard getRankMask(SquareIndex index);
Bitboard getFileMask(SquareIndex index);

// Piece attacks
Bitboard getQueenMask(SquareIndex index);
Bitboard getRookMask(SquareIndex index);
Bitboard getBishopMask(SquareIndex index);

Bitboard getKnightAttacks(Bitboard board);
Bitboard getKingAttacks(Bitboard board);
Bitboard getBishopAttacks(SquareIndex index, Bitboard occupancy);
Bitboard getRookAttacks(SquareIndex index, Bitboard occupancy);

void printRays(SquareIndex index);
void printKnightAttacks();

constexpr std::array<Bitboard, Square::SQUARE_COUNT> bishopMagicNumbers = {
    2202271430736118528ULL,  11677838373691719778ULL, 299638990408290305ULL,
    4612816370206377729ULL,  165596072004060544ULL,   1450302086318145636ULL,
    5927315479043770880ULL,  3480297901578535464ULL,  4738658034727830280ULL,
    22667709019881744ULL,    288279390654349349ULL,   1779047240187416728ULL,
    54044364844836960ULL,    310750581954193808ULL,   6998596613218246810ULL,
    364950863847377088ULL,   45264974001606786ULL,    9234640455342751876ULL,
    9297681911812276341ULL,  654153721463238688ULL,   582090311976890390ULL,
    3641444118762818560ULL,  16150473414104069121ULL, 689411385586757648ULL,
    1452419814148550666ULL,  1549608807772066304ULL,  1373650677267464224ULL,
    582169419032166592ULL,   16025078510708072452ULL, 600062869492501027ULL,
    11007927822957809961ULL, 144268091218479112ULL,   486775964564475938ULL,
    6972152775728701953ULL,  10845868578023931937ULL, 1162801718244148352ULL,
    9229045525444190216ULL,  9624196802282590216ULL,  144823320827480081ULL,
    11729625779779207431ULL, 10376866000887889920ULL, 4686594650953246734ULL,
    288384447500259330ULL,   4827864308845127681ULL,  4636658405694514184ULL,
    1022334776790630464ULL,  631080147962848768ULL,   576926213374080ULL,
    16227177823688720390ULL, 6151989951025119520ULL,  2894125878177435651ULL,
    1738987724180308483ULL,  1155336384630884889ULL,  9299974534314721539ULL,
    380571813455601808ULL,   4836870658259468290ULL,  9367910691645700096ULL,
    11541042496004047780ULL, 13880714730175726625ULL, 1164385238393856ULL,
    1152929338731021317ULL,  9403551482986644233ULL,  9441889117985707524ULL,
    585728681943810561ULL};

constexpr std::array<Bitboard, Square::SQUARE_COUNT> rookMagicNumbers = {
    13690107169217112945ULL, 16909595728155107665ULL, 2123063628860269946ULL,
    4035226808834661160ULL,  10673531117694526752ULL, 8029918397703717678ULL,
    13083562878446252480ULL, 15348544270174257352ULL, 13490017405117343787ULL,
    8976843990658957604ULL,  10301576892330630232ULL, 2801666492023295514ULL,
    2195460232856257226ULL,  9861605857932418839ULL,  2370960713037578680ULL,
    8995993997382192215ULL,  17645229281959348862ULL, 4343735920766361682ULL,
    8527900304227474261ULL,  15248505431190655918ULL, 8468485666890730719ULL,
    3593327757119613731ULL,  4944687269947111446ULL,  10891129446546179135ULL,
    14506584874387329460ULL, 12475756400726558594ULL, 8868854299685176115ULL,
    7062026289669462742ULL,  3587804798274248587ULL,  12536978651472206209ULL,
    13390965344739446724ULL, 7912357913542973796ULL,  17823648541676567844ULL,
    16722818710209391447ULL, 7973884559592848249ULL,  1947170467483581565ULL,
    929409657981818811ULL,   5523487018808776837ULL,  412796121279209087ULL,
    7980520628053083201ULL,  13865347327246038093ULL, 10466271025676773978ULL,
    12684523333682236008ULL, 8299416087271348697ULL,  15886841937149808343ULL,
    12588971971775504954ULL, 3851323264607735111ULL,  5393983275302947581ULL,
    5737754750552644888ULL,  3065736249640606639ULL,  12282193848289045012ULL,
    2378441412753549833ULL,  12828441701529618822ULL, 6658972368620906761ULL,
    5105258127260727247ULL,  15233245419673223509ULL, 10341412856083681315ULL,
    14227638693931018045ULL, 1659301358219503768ULL,  5226745756237626584ULL,
    3362399540765309368ULL,  6695002540660917772ULL,  275795561066525719ULL,
    13084604094040956754ULL};
