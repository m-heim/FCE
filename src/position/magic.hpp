#pragma once
#include "bitboard.hpp"
#include "chess.hpp"
#define MAGICS_ARRAY_SIZE 200000

enum Direction : Offset {
    SOUTH = -8,
    NORTH = 8,
    WEST = -1,
    EAST = 1,
    SOUTH_WEST = SOUTH + WEST,
    SOUTH_EAST = SOUTH + EAST,
    NORTH_EAST = NORTH + EAST,
    NORTH_WEST = NORTH + WEST,
    SSW = SOUTH + SOUTH + WEST,
    SSE = SOUTH + SOUTH + EAST,
    EES = EAST + EAST + SOUTH,
    EEN = EAST + EAST + NORTH,
    NNE = NORTH + NORTH + EAST,
    NNW = NORTH + NORTH + WEST,
    WWN = WEST + WEST + NORTH,
    WWS = WEST + WEST + SOUTH
};

enum RayDirection : Offset {
    SOUTH_EAST_RAY,
    SOUTH_RAY,
    SOUTH_WEST_RAY,
    WEST_RAY,
    NORTH_WEST_RAY,
    NORTH_RAY,
    NORTH_EAST_RAY,
    EAST_RAY,
    POSITIVE = NORTH_WEST_RAY,
    RAY_COUNT = EAST_RAY + 1
};

inline Bitboard getMagicIndex(Bitboard board, Bitboard magic, uint8_t shift) {
    return (board * magic) >> shift;
}

class Magic {
  public:
    Bitboard *attacks;
    Bitboard magic;
    Bitboard mask;
    uint8_t shift;
    inline Bitboard getMagicIndex(Bitboard board) {
        return (board * magic) >> shift;
    }
    inline Bitboard getAttack(Bitboard occupation) {
        return attacks[getMagicIndex(occupation & mask)];
    }
};

extern std::array<Bitboard, MAGICS_ARRAY_SIZE> magics;
extern std::array<Magic, Square::SQUARE_COUNT> rookMagics;
extern std::array<Magic, Square::SQUARE_COUNT> bishopMagics;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, RayDirection::RAY_COUNT> rays;
extern std::array<Bitboard, Square::SQUARE_COUNT> rankAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> fileAttacks;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> knightAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> kingAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> bishopMasks;
extern std::array<Bitboard, Square::SQUARE_COUNT> rookMasks;
extern std::array<Bitboard, Square::SQUARE_COUNT> queenMasks;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnPushes;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnDoublePushes;
extern std::array<Bitboard, Square::SQUARE_COUNT> maskedSquare;
extern std::array<Bitboard, Square::SQUARE_COUNT> unmaskedSquare;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, Square::SQUARE_COUNT> inBetween;

void initGlobals();

void initPrimitives();
void initMagics();
void initRayAttacks();

Magic initMagicSquare(SquareIndex index, bool bishop, uint64_t *magicIndex);

Bitboard getRayAttacks(Bitboard occupied, RayDirection direction, SquareIndex square);

// Line attacks
Bitboard getDiagonalMask(SquareIndex index);
Bitboard getDiagonal2Mask(SquareIndex index);
Bitboard getRankMask(SquareIndex index);
Bitboard getFileMask(SquareIndex index);

// Piece attacks
Bitboard getQueenMask(SquareIndex index);
Bitboard getRookMask(SquareIndex index);
Bitboard getBishopMask(SquareIndex index);

Bitboard getKnightAttacks(Bitboard board);
Bitboard getKingAttacks(Bitboard board);
Bitboard getBishopAttacks(SquareIndex index, Bitboard occupancy);
Bitboard getRookAttacks(SquareIndex index, Bitboard occupancy);

void printRays(SquareIndex index);
void printKnightAttacks();

constexpr std::array<Bitboard, Square::SQUARE_COUNT> bishopMagicNumbers = {
    148671908236853649ULL,   11972898914065059840ULL, 579040292498837765ULL,
    578758732147008643ULL,   14714389215442911237ULL, 12323546238384635937ULL,
    163539916878250146ULL,   9550305362060517494ULL,  13909965619849597080ULL,
    11628376495153807430ULL, 1803904992558483936ULL,  6928862810956892897ULL,
    9530181969351636138ULL,  11007362698573828240ULL, 290519851890378772ULL,
    5982630789696020560ULL,  4697255066070960774ULL,  869784273615389706ULL,
    16148234000001962752ULL, 9891177638247186480ULL,  141373288218691ULL,
    2527926845301588508ULL,  1729670398968619089ULL,  5501287985695950944ULL,
    4620730644161496076ULL,  327673167780911264ULL,   9412602386662818052ULL,
    9241393033038041104ULL,  2405203751171276816ULL,  10124239297742651908ULL,
    11530503709163334667ULL, 4783668368605615232ULL,  5201957358368036864ULL,
    4630272301781352961ULL,  9229010611701547524ULL,  13835304380255109396ULL,
    1450161296233234562ULL,  9227929513643606080ULL,  1452412035196282896ULL,
    12139460492700699136ULL, 4756091486460756070ULL,  4611760796497086472ULL,
    4538869932363778ULL,     9516123888323627008ULL,  4612258043713837376ULL,
    282643560172672ULL,      598980958060454918ULL,   299674945229685249ULL,
    10422323514232291617ULL, 2463187839291230400ULL,  15138994199132897280ULL,
    653672908937756674ULL,   9368650576985985666ULL,  2336741794484650641ULL,
    290499974320425625ULL,   1345467986042961348ULL,  4612990073611300945ULL,
    2306977997308560065ULL,  4668262764228383236ULL,  1314066686101553680ULL,
    108455881996372102ULL,   10772623573139917064ULL, 5787178366719265441ULL,
    865992984666188160ULL};

constexpr std::array<Bitboard, Square::SQUARE_COUNT> rookMagicNumbers = {
    1549238546762596369ULL,  18015133485780992ULL,    9295438581887664448ULL,
    144120007566573744ULL,   144117525411004816ULL,   144120157789750288ULL,
    864691478570729730ULL,   9655719836617090053ULL,  2750151261025820787ULL,
    3783094124459073538ULL,  7501308286106468416ULL,  4990832985197707296ULL,
    36310464465469696ULL,    3188970765835960448ULL,  13934700580431211008ULL,
    216735733447730948ULL,   592292070480150688ULL,   1731427623417942018ULL,
    2891455546819387393ULL,  11574538015145467912ULL, 5206726318754369540ULL,
    2667679641564644352ULL,  18053982573332481ULL,    30137613719474500ULL,
    7532481485157328147ULL,  2891592594666553475ULL,  117093734194086282ULL,
    877606000629125128ULL,   17873098096943566880ULL, 2307145002796728336ULL,
    9655860073738547720ULL,  13030131027383953508ULL, 865324447496667168ULL,
    704924467871745ULL,      580982090179297408ULL,   2391411473009084420ULL,
    162270633353282561ULL,   1450176947211535392ULL,  15965021376883024ULL,
    603803444003734601ULL,   1765411193519931408ULL,  3026456335152709702ULL,
    11783106025892741152ULL, 3535889492552581144ULL,  9523336547697557512ULL,
    686236339100844068ULL,   38298294298083342ULL,    306352125238444036ULL,
    1731353149758902784ULL,  2452810624690883072ULL,  8216554874381549824ULL,
    10792878156529437312ULL, 8389362333699608832ULL,  2783787554100568576ULL,
    9095856104098816ULL,     9807930693983420928ULL,  1383168589628379174ULL,
    2329206808960311890ULL,  2459041297479065601ULL,  2381348809423980546ULL,
    7724045030231117953ULL,  144299957679031562ULL,   8124785683681316868ULL,
    2829532312268702978ULL};
