#pragma once
#include "bitboard.hpp"
#include "chess.hpp"
#define MAGICS_ARRAY_SIZE 200000

enum Direction : Offset {
    SOUTH = -8,
    NORTH = 8,
    WEST = -1,
    EAST = 1,
    SOUTH_WEST = SOUTH + WEST,
    SOUTH_EAST = SOUTH + EAST,
    NORTH_EAST = NORTH + EAST,
    NORTH_WEST = NORTH + WEST,
    SSW = SOUTH + SOUTH + WEST,
    SSE = SOUTH + SOUTH + EAST,
    EES = EAST + EAST + SOUTH,
    EEN = EAST + EAST + NORTH,
    NNE = NORTH + NORTH + EAST,
    NNW = NORTH + NORTH + WEST,
    WWN = WEST + WEST + NORTH,
    WWS = WEST + WEST + SOUTH
};

enum RayDirection : Offset {
    SOUTH_EAST_RAY,
    SOUTH_RAY,
    SOUTH_WEST_RAY,
    WEST_RAY,
    NORTH_WEST_RAY,
    NORTH_RAY,
    NORTH_EAST_RAY,
    EAST_RAY,
    POSITIVE = NORTH_WEST_RAY,
    RAY_COUNT = EAST_RAY + 1
};

inline Bitboard getMagicIndex(Bitboard board, Bitboard magic, uint8_t shift) {
    return (board * magic) >> shift;
}

class Magic {
  public:
    Bitboard *attacks;
    Bitboard magic;
    Bitboard mask;
    uint8_t shift;
    inline Bitboard getMagicIndex(Bitboard board) {
        return (board * magic) >> shift;
    }
    inline Bitboard getAttack(Bitboard occupation) {
        return attacks[getMagicIndex(occupation & mask)];
    }
};

extern std::array<Bitboard, MAGICS_ARRAY_SIZE> magics;
extern std::array<Magic, Square::SQUARE_COUNT> rookMagics;
extern std::array<Magic, Square::SQUARE_COUNT> bishopMagics;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, RayDirection::RAY_COUNT> rays;
extern std::array<Bitboard, Square::SQUARE_COUNT> rankAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> fileAttacks;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> knightAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> kingAttacks;
extern std::array<Bitboard, Square::SQUARE_COUNT> bishopMasks;
extern std::array<Bitboard, Square::SQUARE_COUNT> rookMasks;
extern std::array<Bitboard, Square::SQUARE_COUNT> queenMasks;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnPushes;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, 2> pawnDoublePushes;
extern std::array<Bitboard, Square::SQUARE_COUNT> maskedSquare;
extern std::array<Bitboard, Square::SQUARE_COUNT> unmaskedSquare;
extern std::array<std::array<Bitboard, Square::SQUARE_COUNT>, Square::SQUARE_COUNT> inBetween;

void initGlobals();

void initPrimitives();
void initMagics();
void initRayAttacks();

Magic initMagicSquare(SquareIndex index, bool bishop, uint64_t *magicIndex);

Bitboard getRayAttacks(Bitboard occupied, RayDirection direction, SquareIndex square);

// Line attacks
Bitboard getDiagonalMask(SquareIndex index);
Bitboard getDiagonal2Mask(SquareIndex index);
Bitboard getRankMask(SquareIndex index);
Bitboard getFileMask(SquareIndex index);

// Piece attacks
Bitboard getQueenMask(SquareIndex index);
Bitboard getRookMask(SquareIndex index);
Bitboard getBishopMask(SquareIndex index);

Bitboard getKnightAttacks(Bitboard board);
Bitboard getKingAttacks(Bitboard board);
Bitboard getBishopAttacks(SquareIndex index, Bitboard occupancy);
Bitboard getRookAttacks(SquareIndex index, Bitboard occupancy);

void printRays(SquareIndex index);
void printKnightAttacks();

constexpr std::array<Bitboard, Square::SQUARE_COUNT> bishopMagicNumbers = {
    1730509299414795521ULL,  729591937985252384ULL,   9748059552858817268ULL,
    155660116078600248ULL,   11547794663407653412ULL, 1265669842685419602ULL,
    10521679908324778760ULL, 11836024972131963072ULL, 1153025547038687744ULL,
    9799842143935021571ULL,  623906908298327040ULL,   9016133864790340ULL,
    13296387595203773488ULL, 13512699415346827550ULL, 126101924008337589ULL,
    14214496305694184450ULL, 13267903586726184969ULL, 1754152540209422472ULL,
    6919220145270558976ULL,  1161127262290180ULL,     154250557465297434ULL,
    1189232094476383745ULL,  7566909598532526080ULL,  3508621220059290208ULL,
    10810895514568282120ULL, 761253840091087360ULL,   887246513477255623ULL,
    6939492871951618304ULL,  10686069948570214400ULL, 5261421525449376005ULL,
    9230415663548633136ULL,  10134220150178368ULL,    2634364164332752898ULL,
    4943738753644495954ULL,  5051350275648406144ULL,  730148295053673344ULL,
    3638979417955500544ULL,  1829631906766391298ULL,  12398414173309411880ULL,
    9225905595166033168ULL,  722833342441101955ULL,   4900216020634456128ULL,
    14412082864701068546ULL, 50384159126063104ULL,    1306264348317975552ULL,
    144713323491889280ULL,   10558465335403545216ULL, 16151042961144119872ULL,
    10673709272650778154ULL, 6917846821002038440ULL,  2503590471010338ULL,
    4611979614976738114ULL,  9457840732233793556ULL,  723964841444253784ULL,
    5206609898979328544ULL,  10314519258838606288ULL, 11822777011176224ULL,
    9223759206749832344ULL,  1963076875690977328ULL,  16218116503082534918ULL,
    2666148815338225936ULL,  13871160382451877955ULL, 4666737809988911488ULL,
    2531058179524592576ULL};

constexpr std::array<Bitboard, Square::SQUARE_COUNT> rookMagicNumbers = {
    13690107169217112945ULL, 16909595728155107665ULL, 2123063628860269946ULL,
    4035226808834661160ULL,  10673531117694526752ULL, 8029918397703717678ULL,
    13083562878446252480ULL, 15348544270174257352ULL, 13490017405117343787ULL,
    8976843990658957604ULL,  10301576892330630232ULL, 2801666492023295514ULL,
    2195460232856257226ULL,  9861605857932418839ULL,  2370960713037578680ULL,
    8995993997382192215ULL,  17645229281959348862ULL, 4343735920766361682ULL,
    8527900304227474261ULL,  15248505431190655918ULL, 8468485666890730719ULL,
    3593327757119613731ULL,  4944687269947111446ULL,  10891129446546179135ULL,
    14506584874387329460ULL, 12475756400726558594ULL, 8868854299685176115ULL,
    7062026289669462742ULL,  3587804798274248587ULL,  12536978651472206209ULL,
    13390965344739446724ULL, 7912357913542973796ULL,  17823648541676567844ULL,
    16722818710209391447ULL, 7973884559592848249ULL,  1947170467483581565ULL,
    929409657981818811ULL,   5523487018808776837ULL,  412796121279209087ULL,
    7980520628053083201ULL,  13865347327246038093ULL, 10466271025676773978ULL,
    12684523333682236008ULL, 8299416087271348697ULL,  15886841937149808343ULL,
    12588971971775504954ULL, 3851323264607735111ULL,  5393983275302947581ULL,
    5737754750552644888ULL,  3065736249640606639ULL,  12282193848289045012ULL,
    2378441412753549833ULL,  12828441701529618822ULL, 6658972368620906761ULL,
    5105258127260727247ULL,  15233245419673223509ULL, 10341412856083681315ULL,
    14227638693931018045ULL, 1659301358219503768ULL,  5226745756237626584ULL,
    3362399540765309368ULL,  6695002540660917772ULL,  275795561066525719ULL,
    13084604094040956754ULL};
